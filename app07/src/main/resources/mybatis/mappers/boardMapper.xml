<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >


  <!-- 수업내용 -->
<!--  
  매퍼
  1. SQL 구문을 작성하는 파일입니다.
  2. 다음 태그를 사용할 수 있습니다.
    1) <select>
    2) <insert>
    3) <update>
    4) <delete>
  3. 모든 태그는 id 속성을 작성합니다.
    1) 동일한 id 속성 값을 가질 수 없습니다.
    2) SQL 구문과 매핑할 메소드의 이름을 id 속성 값으로 지정하는 것을 권장합니다.
      (1) <select id="selectBoardList">
      (2) <select id="selectBoardCount">
      (3) <select id="selectBoardById">
      (4) <insert id="selectBoard">
      (5) <update id="selectBoard">
      (6) <delete id="selectBoard">
  4. SQL 구문으로 전달되는 값이 있는 경우 parameterType 속성을 작성합니다. (생략 가능) (배열같은경우 작성이 불가능하여 생략함)
    1) <select parameterType="int">
    2) <insert parameterType="com.min.app07.dto.BoartDto">  // 패키지 경로 전체 작성해야함
    3) <update parameterType="com.min.app07.dto.BoartDto">   
    4) <delete parameterType="int">
  5. SQL 구문의 결과 타입은 resultType 속성에 장성합니다. <select> 태그만 작성합니다. <insert>,<update>, <delete> 태그는 작성할 수 없습니다.  
    - 예시 -
    1) List<BoardDto> SelectBoardList();                 // List를 볼때 List를 보지말고 BoardDto 봐야함
      <select resultType="com.min.app07.dto.BoartDto">
    2) int selectBoardCount();
      <select resultType="int">
    3) BoardDto selectBoardById(int boardId);
      <select resultType="com.min.app07.dto.BoartDto">  
  
-->

<!--  
  Parameter 처리 방식
  
  1. #{parameter}
    1) SQL 구무으로 전달된 파라미터를 PreparedStatement의 Place Holder(? 마크) 방식으로 처리한다.
    2) 작성 방법
      (1) 파라미터가 여러개인 경우
        #{param1}, #{param2}, #{param3}, ...
      (2) 파라미터가 일반 변수인 경우
        #{변수명} 
      (3) 파라미터가 Map 인경우
        #{key} 
      (4) 파라미터가 DTO 인경우
        #{field}
        
  2. ${parameter}
    1) 문자열 대체 방식이다. (String Substitution)
    2) 전달된 파라미터가 따옴표 또는 이스케이프 처리 없이 그대로 SQL 구문에 포함됩니다.
    3) SQL 구문의 메타 데이터(테이블 이름, 칼럼 이름, 쿼리문 자체 키워드 등)를 처리할 때 사용합니다.
-->

<!--  
  CDATA
  1. Character Data(문자 데이터)를 의미합니다.
  2. 마크업 언어(xml)에서 마크업으로 해석하지 않고 문자를 그대로 포함하고자 할 때 CDATA를 사용합니다.
  3. 형식
    <![CDATA[문자]]>
-->

<!--  
  동적쿼리
  1. if
    1) 형식
      <if test="파라미터조건식"></if>
    2) 예시
      (1) <if test="title != null"></if>       // null
      (2) <if test="title != ''"></if>         // '' 빈문자열
      (3) <if test="userDto.usrId != 0"></if>  // usrId 꺼내오기
  2. foreach
    1) 형식
      // 직접보낼때 "array|list", map 이보낼때 "key", 객체가 보낼때 "field" 
      <foreach collection="array|list|key|field" item="요소" open="시작구문" close="종료구문" separator="구분자" index="인덱스" nullable="true|false"  
        #{요소}
      </foreach> 
    2) 예시
      (1) 파라미터가 배열 인경우
        <foreach collection="array" item="flower" open="NAME IN (" close=")" separator=",">
          #{flower}
        </foreach>
        ** 결과 : NAME IN ('모란', '백합', '국화')
      (2) 파라미터가 list인 경우
        <foreach collection="list" item="flower" open="(" close=")" separator=",">
          #{flower}
        </foreach>
        ** 결과 : ('모란', '백합', '국화')
      (3) 파라미터가 배열 또는 리스트를 가진 Map인 경우
        List<String> flowers = Arrats.asList("모란","백합","국화");
        Map<String, Object> map = Map.of("flowers", "flowers");
        <foreach collection="flowers" item="flower" open="(" close=")" separator=",">
          #{flower}
        </foreach>
        ** 결과 : ('모란', '백합', '국화')
-->

<mapper namespace="mybatis.mappers.boardMapper">
  
  <!-- ******************************************** -->  
  <!-- myBatis-config.xml 파일에서 type 별명 지정함 -->
  <!-- ******************************************** -->  
  

  <!-- BoardDto의 구조를 이용해 BoardMap을 만듭니다. -->
  <!-- BoardDto를 반환하지 않고, BoardMap을 반환합니다. -->
  <!-- resultType 대신 resultMap을 이용해서 반환합니다. -->
  <resultMap type="BoardDto" id="BoardMap">              <!-- BoardDto -->
    <id column="board_id" property="boardId"/>                             <!-- pk 값은 id -->
    <result column="title" property="title"/>                              <!-- pk 이외 일반값 result -->
    <result column="contents" property="contents"/>   
    <result column="create_dt" property="createDt"/>
    <association javaType="UserDto" property="userDto">  <!-- UserDto -->
      <id column="usr_id" property="usrId"/>
      <result column="usr_email" property="usrEmail"/>
      <result column="usr_name" property="usrName"/>
    </association>
    
  </resultMap>
  
  <select id="selectBoardList" parameterType="String" resultMap="BoardMap">
    SELECT 
           board_id
         , title
         , contents
         , create_dt
         , b.usr_id
         , usr_email
         , usr_name
      FROM 
           tbl_board b INNER JOIN tbl_user u 
        ON 
           b.usr_id = u.usr_id
     ORDER BY 
           board_id ${sort}
  </select>
  
  <select id="selectBoardCount" resultType="int">
    SELECT
           COUNT(*)
      FROM
           tbl_board
  </select>
  
  <select id="selectBoardById" parameterType="int" resultMap="BoardMap">
    SELECT
           board_id
         , title
         , contents
         , create_dt
         , b.usr_id
         , usr_email
         , usr_name
      FROM 
           tbl_board b INNER JOIN tbl_user u 
        ON 
           b.usr_id = u.usr_id
     WHERE
           board_id = #{boardId}
  </select>
  
  <select id="selectBoardSearchList" parameterType="Map" resultMap="BoardMap">
    SELECT
           board_id
         , title
         , contents
         , create_dt
         , b.usr_id
         , usr_email
         , usr_name
      FROM 
           tbl_board b INNER JOIN tbl_user u 
        ON 
           b.usr_id = u.usr_id
     WHERE
           ${column} LIKE CONCAT('%', #{query}, '%')
     <!--  #{column} LIKE CONCAT('%', #{query}, '%') --> <!-- 만능문자'%'는 '='를 사용못하여 LIKE 사용함 -->
            <!-- PreparedStatement
            
                      ? LIKE CONCAT('%',?,'%') 
            
                  ps.setString(1,"title");
                  ps.setString(2,"10");
            
      쿼리문 : WHERE 'title' LIKE CONCAT('%',10,'%')
                'title'이 문자열에 따움표가 붙어서 문제된다.
                String을 전달할때는 ${parameter}을 사용한다. -->
                
  </select>
  
  <select id="selectBoardPeriodList" parameterType="Map" resultMap="BoardMap">
    SELECT
           board_id
         , title
         , contents
         , create_dt
         , b.usr_id
         , usr_email
         , usr_name
      FROM 
           tbl_board b INNER JOIN tbl_user u 
        ON 
           b.usr_id = u.usr_id
     WHERE
           DATE(create_dt) BETWEEN #{beginDt} AND #{endDt}
       <!-- DATE(create_dt) >= #{beginDt} AND DATE(create_dt) <![CDATA[<=]]> #{endDt}  -->
       <!-- DATE(create_dt) >= #{beginDt} AND DATE(create_dt) <= #{endDt}
            위형식으로하면 '<=' 부분에 '<'가 함수를 여는것으로 판단되어 '<![CDATA[<=]]>' 이렇게 바꾸어주어야함 -->
                
  </select>

  <select id="selectBoardIntegratedSearch" parameterType="Map" resultMap="BoardMap">
    SELECT
           board_id
         , title
         , contents
         , create_dt
         , b.usr_id
         , usr_email
         , usr_name
      FROM 
           tbl_board b INNER JOIN tbl_user u 
        ON 
           b.usr_id = u.usr_id
  <!-- title 부터시작해서 AND가 없으면 다음 시작이 'WHERE AND usr_email...'  문법 오류가 되어 항상 성립하는 1+1을 앞에 남김-->      
  <!--    
     WHERE 1 = 1   
     <if test="title != ''">  빈문자열'' 체크 파라미터이름 전달
       AND title     LIKE CONCAT('%', #{title}, '%')     
     </if>
     <if test="usrEmail != ''">
       AND usr_email LIKE CONCAT('%', #{usrEmail}, '%')
     </if>
     <if test="usrName !=''"> 
     ... 
  -->
  
     <!-- <where> 태그를 사용하면 조건식이 AND, OR로 시작하는 경우 이를 지웁니다. -->
     <where>
     <if test="title != ''">  <!-- 빈문자열'' 체크 파라미터이름 전달 -->
           title     LIKE CONCAT('%', #{title}, '%')     
     </if>
     <if test="usrEmail != ''">
       AND usr_email LIKE CONCAT('%', #{usrEmail}, '%')
     </if>
     <if test="usrName !=''">
       AND usr_name  LIKE CONCAT('%', #{usrName}, '%')
     </if>
     <if test="beginDt !='' and endDt !=''">
       AND DATE(create_dt) BETWEEN #{beginDt} AND #{endDt}
     </if>
     </where>   

      <!-- Map.of("title", "검색어", "usr_email", "", "usr_name, "", "beginDt", ...) // 검색어를 넣지 않은것은 빈문자열로 반환
              title Like '%검색어%'
          and usr_email LIKE '%%' //검색하고 싶지 않은건 if를 이용하여 뺄수있다. -->

  </select>
  
  <select id="selectBoardIntegratedSearchCount" parameterType="Map" resultType="int">
    SELECT
           COUNT(*)
      FROM
           tbl_board b INNER JOIN tbl_user u 
        on b.usr_id = u.usr_id
     <!-- <where> 태그를 사용하면 조건식이 AND, OR로 시작하는 경우 이를 지웁니다. -->
     <where>
     <if test="title != ''">
           title     LIKE CONCAT('%', #{title}, '%')     
     </if>
     <if test="usrEmail != ''">
       AND usr_email LIKE CONCAT('%', #{usrEmail}, '%')
     </if>
     <if test="usrName !=''">
       AND usr_name  LIKE CONCAT('%', #{usrName}, '%')
     </if>
     <if test="beginDt !='' and endDt !=''">
       AND DATE(create_dt) BETWEEN #{beginDt} AND #{endDt}
     </if>
     </where>   
  </select>
  
  <insert id="insertBoard" parameterType="BoardDto">
    INSERT INTO
      tbl_board
    VALUES (
        NULL
      , #{title}
      , #{contents}
      , NOW()
      , #{userDto.usrId}
    )
    <!--  
      SELECT LAST_INSERT_ID() : 마지막으로 삽입된 PK값을 의미합니다. (해당 커넥션에서만 동작하므로, 다수의 사용자가 동시에 다른 커넥션으로 삽입을 요청해도 해당 커넥션에서 삽입한 PK값임을 보장합니다.)
      resultType="int"        : SELECT 문의 결과가 int 타입입니다.
      order="AFTER"           : INSERT 문이 실행된 이후에 <selectKey> 태그가 동작합니다.
      keyProperty="boardId"   : 마지막으로 삽입된 PK 값을 boardId에 저장합니다. boardId는 삽입할 정보를 가지고 있는 파라미터에 있습니다.
    -->
    <selectKey keyProperty="boardId" order="AFTER" resultType="int">
      SELECT LAST_INSERT_ID()
    </selectKey>
  </insert>
  
  <update id="updateBoard" parameterType="BoardDto">
    UPDATE
           tbl_board
       <!-- <set> 태그는 콤마(,)로 시작하면 이를 지웁니다. -->
       <set>
         <if test="title != ''">
            title = #{title}
         </if>
         <if test="contents != null">
           , contents = #{contents}
         </if>
       </set>
     WHERE
           board_id = #{boardId}
  </update>
  
  <delete id="deleteBoard" parameterType="int">
    DELETE
      FROM
           tbl_board
     WHERE
           board_id = #{boardId}
  </delete>
  
  <delete id="deleteSelectedBoard">
    DELETE
      FROM
           tbl_board
     WHERE 
           board_id IN
     <foreach collection="array" item="number" open="(" close=")" separator=",">
       #{number}
     </foreach>
  </delete>
  
  
  
</mapper>
